interface AIBaseClient extends AttackableUnit {
  readonly CanMove: boolean;
  readonly CanAttack: boolean;
  readonly CanCast: boolean;
  readonly IsImmovable: boolean;
  readonly IsStealthed: boolean;
  readonly IsTaunted: boolean;
  readonly IsFeared: boolean;
  readonly IsFleeing: boolean;
  readonly IsSurpressed: boolean;
  readonly IsAsleep: boolean;
  readonly IsNearSighted: boolean;
  readonly IsGhosted: boolean;
  readonly IsCharmed: boolean;
  readonly IsSlowed: boolean;
  readonly IsGrounded: boolean;
  readonly IsDodgingMissiles: boolean;
  readonly PercentCooldownMod: number;
  readonly PercentCooldownCapMod: number;
  readonly FlatPhysicalDamageMod: number;
  readonly PercentPhysicalDamageMod: number;
  readonly PercentBonusPhysicalDamageMod: number;
  readonly PercentBasePhysicalDamageMod: number;
  readonly FlatMagicalDamageMod: number;
  readonly PercentMagicalDamageMod: number;
  readonly FlatMagicReduction: number;
  readonly PercentMagicReduction: number;
  readonly FlatCastRangeMod: number;
  readonly AttackSpeedMod: number;
  readonly BaseAttackDamage: number;
  readonly FlatBaseAttackDamageMod: number;
  readonly PercentBaseAttackDamageMod: number;
  readonly BaseAbilityDamage: number;
  readonly CritDamageMultiplier: number;
  readonly DodgeChance: number;
  readonly CritChance: number;
  readonly Armor: number;
  readonly BonusArmor: number;
  readonly SpellBlock: number;
  readonly BonusSpellBlock: number;
  readonly HealthRegen: number;
  readonly BaseHealthRegen: number;
  readonly MoveSpeed: number;
  readonly MoveSpeedBaseIncrease: number;
  readonly AttackRange: number;
  readonly FlatArmorPen: number;
  readonly PhysicalLethality: number;
  readonly PercentArmorPen: number;
  readonly PercentBonusArmorPen: number;
  readonly PercentCritBonusArmorPen: number;
  readonly PercentCritTotalArmorPen: number;
  readonly FlatMagicPen: number;
  readonly MagicalLethality: number;
  readonly PercentMagicPen: number;
  readonly PercentBonusMagicPen: number;
  readonly PercentLifeStealMod: number;
  readonly PercentSpellVampMod: number;
  readonly PercentCCReduction: number;
  readonly PercentEXPBonus: number;
  readonly ManaRegen: number;
  readonly PrimaryResourceRegen: number;
  readonly PrimaryResourceBaseRegen: number;
  readonly SecondaryResourceRegen: number;
  readonly SecondaryResourceBaseRegen: number;
  readonly IsMoving: boolean;
  readonly IsCasting: boolean;
  readonly IsWindingUp: boolean;
  readonly IsChanneling: boolean;
  readonly IsRanged: boolean;
  readonly IsMelee: boolean;
  // readonly SkinId: number; @Not Implemented
  readonly AttackData: SpellCast;
  readonly AttackData2: SpellCast;
  readonly BaseAD: number;
  readonly BonusAD: number;
  readonly TotalAD: number;
  readonly BaseAP: number;
  readonly BonusAP: number;
  readonly TotalAP: number;
  readonly IsHerald: boolean;
  readonly IsRedBuff: boolean;
  readonly IsBlueBuff: boolean;
  readonly IsBaron: boolean;
  readonly IsDragon: boolean;
  readonly CharName: string;
  readonly BaseHealth: number;
  readonly BonusHealth: number;
  readonly AttackDelay: number;
  readonly AttackCastDelay: number;
  readonly ActiveSpell: SpellCast;
  readonly Pathing: Pathing;
  readonly ServerPos: Vector;
  readonly HealthBarScreenPos: Vector;
  readonly BuffCount: number;
  /**
   * @returns [buffName_lower] = Buff
   */
  readonly Buffs: BuffInst[];
  readonly Direction: Vector;
  readonly TimeUntilRespawn: number;
  FastPrediction(delay_ms: number): Vector;
  GetSpell(slot: number): SpellData | null;
  GetSpellState(slot: number): number;
  GetBuff(index_or_name: number | string): BuffInst | null;
  IsFacing(pos_or_obj: Vector | GameObject, max_degrees?: number): boolean;
}
